<?xml version="1.0"?>
<doc>
    <assembly>
        "csharp-api"
    </assembly>
    <members>
        <member name="T:REFrameworkNET.Attributes.MethodHookAttribute">
            <summary>Attribute to mark a method as a hook.</summary>
        </member>
        <member name="M:REFrameworkNET.ValueType.GetAddress">
            <returns>The address of the object</returns>
        </member>
        <member name="M:REFrameworkNET.ValueType.Ptr">
            <returns>The address of the object as a void* pointer</returns>
        </member>
        <member name="M:REFrameworkNET.ValueType.GetTypeDefinition">
            <returns>The type of the object</returns>
        </member>
        <member name="T:REFrameworkNET.Attributes.MethodAttribute">
            <summary>Attribute to mark a reference assembly method for easier lookup.</summary>
        </member>
        <member name="T:REFrameworkNET.ICallback">
            <summary>Internal interface used to prove that a class is a callback belonging to REFrameworkNET</summary>
        </member>
        <member name="M:REFrameworkNET.NativeObject.FromAddress(System.UInt64,REFrameworkNET.TypeDefinition)">
            <summary>
Creates a NativeObject wrapper over the given address
</summary>
            <remarks>
This function can be very dangerous if used incorrectly. <br />
Always double check that you are feeding the correct address <br />
and type to this function. <br /></remarks>
            <param name="obj">The address of the object</param>
            <param name="t">The type of the object</param>
            <returns>A NativeObject wrapper over the given address</returns>
        </member>
        <member name="M:REFrameworkNET.NativeObject.GetAddress">
            <returns>The address of the object</returns>
        </member>
        <member name="M:REFrameworkNET.NativeObject.Ptr">
            <returns>The address of the object as a void* pointer</returns>
        </member>
        <member name="M:REFrameworkNET.NativeObject.GetTypeDefinition">
            <returns>The type of the object</returns>
        </member>
        <member name="T:REFrameworkNET.NativeObject">
            <summary />
        </member>
        <member name="M:REFrameworkNET.TDB.GetTypeT``1">
            <summary>
Get a type by its interface type, generally from a reference assembly. Must match the name exactly.
</summary>
            <param name="name">The name of the type.</param>
            <returns>The type definition (casted to an interface) if found, otherwise null.</returns>)
<remarks>Cached.</remarks></member>
        <member name="M:REFrameworkNET.TDB.GetType(System.String)">
            <summary>
Get a type by its name.
</summary>
            <param name="name">The name of the type.</param>
            <returns>The type definition if found, otherwise null.</returns>
            <remarks>Not cached.</remarks>
        </member>
        <member name="M:REFrameworkNET.Field.SetDataBoxed(System.UInt64,System.Object,System.Boolean)">
            <summary>
Set the field data from a boxed object
</summary>
            <param name="obj">The object to set the field data on</param>
            <param name="value">The value to set the field data to</param>
            <param name="isValueType">Whether the object holding the field is a value type</param>
        </member>
        <member name="M:REFrameworkNET.Field.GetDataBoxed(System.Type,System.UInt64,System.Boolean)">
            <summary>
Get the field data as a boxed object, but proxies the object to the target type
</summary>
            <param name="targetReturnType">The target type to proxy the object to.</param>
            <param name="obj">The object to get the field data from</param>
            <param name="isValueType">Whether the object holding the field is a value type</param>
            <returns>The field data as a boxed object</returns>
        </member>
        <member name="M:REFrameworkNET.Field.GetDataBoxed(System.UInt64,System.Boolean)">
            <summary>
Get the field data as a boxed object
</summary>
            <param name="obj">The object to get the field data from</param>
            <param name="isValueType">Whether the object holding the field is a value type</param>
            <returns>The field data as a boxed object</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetMethodSignature">
            <returns>The method signature as a string in the form of "MethodName(Type1, Type2, ...)"</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetRuntimeMethod">
            <returns>The System.MethodInfo object for this method. Not cached.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.AddHook(System.Boolean)">
            <summary>
Adds a hook to this method. Additional operations can be performed on the returned hook object.
</summary>
            <param name="ignore_jmp">If true, the hook will not look for a nearby jmp to locate the "real" function.</param>
            <returns>The hook object.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetInvokeID">
            <summary>
Gets the invoke ID of this method. This is the index into the global invoke wrapper table.
</summary>
            <returns>The invoke ID.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetParameters">
            <returns>The parameters of the method.</returns>
            <remarks>
                <see cref="T:REFrameworkNET.MethodParameter" />
            </remarks>
        </member>
        <member name="M:REFrameworkNET.Method.GetNumParams">
            <returns>The number of parameters of the method.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetReturnType">
            <returns>The return <see cref="T:REFrameworkNET.TypeDefinition" /> of the method.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetDeclaringType">
            <returns>The declaring <see cref="T:REFrameworkNET.TypeDefinition" /> of the method.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.GetName">
            <returns>The name of the method.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.HandleInvokeMember_Internal(System.Object,System.Object[],System.Object@)">
            <summary>
Invokes this method with the given arguments.
</summary>
            <param name="obj">The object to invoke the method on. Null for static methods.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="result">The return value of the method. REFramework will attempt to convert this into a usable object.</param>
            <returns>True if the method was successfully found and invoked, false otherwise.</returns>
        </member>
        <member name="M:REFrameworkNET.Method.Invoke(System.Object,System.Object[])">
            <summary>
Invokes this method with the given arguments.
</summary>
            <param name="obj">The object to invoke the method on. Null for static methods.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The return value of the method. 128 bytes in size internally.</returns>
            <remarks>
Generally should not be used unless you know what you're doing.
Use the other invoke method to automatically convert the return value correctly into a usable object.
</remarks>
        </member>
        <member name="T:REFrameworkNET.Method">
            <summary>
Represents a method in the RE Engine's IL2CPP metadata.
Equivalent to System.RuntimeMethodHandle in .NET.
</summary>
            <remarks />
        </member>
        <member name="M:REFrameworkNET.TypeDefinition.HandleInvokeMember_Internal(System.String,System.Object[],System.Object@)">
            <summary>
Invokes a <see cref="T:REFrameworkNET.Method" /> with the given arguments.
</summary>
            <param name="obj">The object to invoke the method on. Null for static methods.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="result">The return value of the method. REFramework will attempt to convert this into a usable object.</param>
            <returns>True if the method was successfully found and invoked, false otherwise.</returns>
        </member>
        <member name="M:REFrameworkNET.TypeDefinition.Invoke(System.String,System.Object[])">
            <summary>
Invokes a <see cref="T:REFrameworkNET.Method" /> with the given arguments.
</summary>
            <param name="obj">The object to invoke the method on. Null for static methods.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The return value of the method. 128 bytes in size internally.</returns>
            <remarks>
Generally should not be used unless you know what you're doing.
Use the other invoke method to automatically convert the return value correctly into a usable object.
</remarks>
        </member>
        <member name="M:REFrameworkNET.TypeDefinition.GetRuntimeType">
            <returns>The System.Type for this <see cref="T:REFrameworkNET.TypeDefinition" />.</returns>
        </member>
        <member name="M:REFrameworkNET.TypeDefinition.GetUnderlyingType">
            <returns>The underlying type of this <see cref="T:REFrameworkNET.TypeDefinition" />.</returns>
            <remarks>Usually used for enums.</remarks>
        </member>
        <member name="M:REFrameworkNET.TypeDefinition.CreateInstance(System.Int32)">
            <summary>
                <para>
THIS IS IMPORTANT! Please refer to <see cref="M:REFrameworkNET.ManagedObject.Globalize" />
Objects returned from CreateInstance are NOT globalized
meaning you cannot assign them to a global variable, static field, or some other long term storage
because they will be quickly destroyed by the Garbage Collector.
You need to manually call ManagedObject::Globalize if you intend to keep the object around
</para>
            </summary>
            <param name="flags">The flags to use when creating the instance.</param>
            <returns>A new <see cref="T:REFrameworkNET.ManagedObject" /> instance of type <see cref="T:REFrameworkNET.TypeDefinition" />.</returns>
        </member>
        <member name="T:REFrameworkNET.TypeDefinition">
            <summary>
Represents a type in the RE Engine's IL2CPP metadata.
Equivalent to System.RuntimeTypeHandle in .NET.
</summary>
            <remarks />
        </member>
        <member name="T:REFrameworkNET.VMObjType">
            <summary>
A shorthand enum for determining how a <see cref="T:REFrameworkNET.TypeDefinition" /> is used in the VM.
</summary>
        </member>
        <member name="M:REFrameworkNET.ManagedObject.Release">
            <summary>
Releases a reference to the managed object
</summary>
            <remarks>Try to avoid calling this manually except in extraordinary circumstances</remarks>
        </member>
        <member name="M:REFrameworkNET.ManagedObject.AddRef">
            <summary>
Adds a reference to the managed object
</summary>
            <remarks>Try to avoid calling this manually except in extraordinary circumstances</remarks>
        </member>
        <member name="M:REFrameworkNET.ManagedObject.Globalize">
            <summary>
                <para>
Globalizes the managed object if it is not already globalized <br />
This is usually useful in instances where objects are newly created, and you want <br />
to keep long term references to them, otherwise the object will be quickly destroyed <br />
A local object is an object that can only be referenced by the spawned thread <br />
A global object is an object that can be referenced by any thread <br /><br />
To quote the talk, "Achieve Rapid Iteration: RE ENGINE Design": <br /><br />
Local object <br />
 Objects that can only be referenced by the spawned thread <br />
 Registered in the local table for each thread <br />
 Reference counter (RC) is negative and points to the index of the local table <br />
 All objects created from C# will be local objects <br /><br />
Local =&gt; Global conversion <br />
 Convert when it becomes available to all threads <br />
   When storing in a static field <br />
   When storing in a field of a global object <br />
 Cleared from local table and RC becomes 1 <br />
   Convert all references globally <br /><br />
Global object <br />
 Objects that can be referenced by all threads <br />
 Reference counter (RC) is positive and represents the number of object references <br />
 All objects generated from C++ become global objects <br /><br /></para>
            </summary>
            <returns>The current managed object</returns>
            <remarks>
                <para>
This should only need to be called in the following instances: <br />
You are manually creating an instance of a managed object <br />
A method you are calling is freshly creating a new managed object (usually arrays or some other kind of constructor) <br />
More information: <a href="https://github.com/kasicass/blog/blob/master/3d-reengine/2021_03_10_achieve_rapid_iteration_re_engine_design.md#framegc-algorithm-17">https://github.com/kasicass/blog/blob/master/3d-reengine/2021_03_10_achieve_rapid_iteration_re_engine_design.md#framegc-algorithm-17</a><br /></para>
            </remarks>
        </member>
    </members>
</doc>